Course notes
Cool links for testing front-end dev stuff:
 * jsfiddle.com
 * codepen.io (create an account here and you can save all your stuff to look at over time); you can see featured pens that do really cool stuff


====== WEEK 1  - HTML ==========
* HTML: structure (paragraphs, headers, footers, title, etc)
* CSS: style (font size, color, etc)
* Javascript: behavior (what happens after loading?  if i click on something?)

W3C (orig org for standards back in 1997) and WHATWG (browser vendors started standards in 2004) started working together in 2007 on html5 (came out in 2011) - so, w3c is responsible for the html5 standard, and whatwg (they actually implement it) has an "evolving" HTML standard - so, seems like browsers must follow the W3C standard, but also can have additional features as they evolve w/the WHATWG (web hypertext application technology group)

Resources to keep track of standards and validate your code:
  * www.w3.org/TR/html5/
  * caniuse.com
  * validator.w3.org/#validate_by_input

 Lecture 5 - HTML content models
* block-level elements (create a new line) vs inline elements (no new line) - block level elements by default try to take up as much horizontal space as available
   - div
* inline elements can contain other inline; block elements can contain other block or inline.
   - span

HTML 5 has 7 categories, not just those 2 - https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#kinds-of-content
  * block-level is somewhat similar to "flow content" context
  * inline is somewhat similar to "phrasing content"

Lecture 6 - Heading elements and some new HTML5 semantic elements
* sematic html element implies meaning to the context
* _may_ help SEO
* H1/H2 heading tags are semantic, use them to mark headings in your content, NOT as style
* Always use H1 and it should contain the central meaning of the content (crucial to SEO)
* other sematic tags - header, nav, section, article, aside, footer (ALL ARE BLOCK LEVEL ELEMENTS - visually you could of course just use div's and styles, but then you lose the sematic meaning when looking at the html itself)

Lecture 7 - Lists
* alredy knew all this (ul, ol, li)

Lecture 8 - HTML Character Entity References
* Escaping characters, e.g. < > & (&lt; &gt; &amp;)
* copyright - &copy;
* control wrapping - &nbsp (non-breaking space) - apply margins in span tags to create spacing between words; using &nbsp for that is a misuse of that tag!
* use entity references like &quot; to get around rendering issues with encoding

Lecture 9 - Creating Links
* always use a "title" tag in your a href tag for screen readers
* the "a" tag is both block and inline (flow and phrasing) so can surround a div tag, img tag, etc
* fragment identifiers (critical in single-page-apps SPA's), e.g. the # stuff via <section id='foo'> or <a name='foo'>
* external vs internal (relative) links

Lecture 10 - Images
* img:  src, width, height, alt tags
   - use width and height so browser doens't "jump around" if it's loading and so broken images take up the right amount of space

====== WEEK 2 - CSS ==========

Lecture 11 - Power of CSS

Lecture 12 - Anatomy of a CSS rule
* CSS rule consists of a selector (like p, a, etc) and the declaraction (property/value pairs)
* styles can go in the head section of the document via "style" tag; one or more styles is a "stylesheet"
* every browser comes w/default styles for various selectors

Lecture 13: Element, Class, and ID Selectors
* crafting selectors is key because javascript uses them similarly, so this is important!
* an "element" selector is just specifying the element name (e.g. p for the <p> element; would not affect <div> of course)
* a "class" selector is specified starting with a dot (e.g. .blue selector means that <p class='blue'> woudl get that CSS as would <div class='blue'>)
* ID selectors start with a # (e.g. #blue selector would affect <div id="blue">) - there should only be one instance of each ID in a doc so if you want to reuse, it's best to use classes.
* you can group selectors with commas:
  div, .blue { color: blue;}
  would impact <p class="blue"> as well as <div>foo</div>
* CSS names are case sensitive

Lecture 14: Combining Selectors
* p.big means every p element with class="big"
* child selector:
  article > p  - means every p element that is a direct child of an article element, e.g. <article><p> would get that style, but not <p> or <article><div><p>
* descendant selector:
  article p  - means every p element at any level below an article element, not just the direct child
* multiple classes can be applied to an element by just entering them separated by spaces (e.g. <div class="foo bar">)
* specify multiple classes necessary to get a style:  e.g. .main.highlight affects things that have BOTH class main and highlight

Lecture 15: Pseudo-class selectors
* selector:pseudo-class
  - examples: :link, :visited, :hover, :active, :nth-child(...)
* set style of <a> elements based on whether they are visted or not
* set style of elements when hovered over

Lecture 16: Style placement
* style declarations that appear inside and element  are called "inline styling"
* style section inside the head of the page is another place to put it
* external stylesheets are preferred - via <link rel="stylesheet" href="style.css"> - stylesheets specified second override those specified first.

Lecture 17: Conflict resolution part 1
* origin:
   - when there's a conflict, last declaration wins (remember, HTML is processed top to bottom); external CSS is "declared" at the spot where it's linked to
   - when there's not a conflict, they merge
* inheritance:
   - child elements inherit from parents - e.g. if you specify a style on "body" it's going to apply to every element in the body

Lecture 17: Conflict resolution part 2
* specificity:
    - the most specific selector combination wins (this is the most complicated rule)
    - the algorithm calculates a "score" for specificity and the highest score applies its style
        - style="..." (highest precedence) (1000 points)
        - ID (100 points each)
        - class, pseudo-class,attribute (10 points each)
        - # of elements (lowest precedence) (1 point each)
    - use !important with your style to override specificity, e.g. "p { color: green !important; }"

 Lecture 18: Styling text part 1
 * use "font-family" to specify a set of fonts for the browser to chose from - often we have, as the last one, either "sans-serif" or "serif" (serif has the fancy bits on the letters)
    - http://www.w3schools.com/cssref/css_websafe_fonts.asp
 * color - 6 digit hexedecmial
 * font-style: e.g., "italic"
 * font-weight: 100-900 or "bold" (bold is 900?)
 * font-size: e.g. 24px (pixels) - on a low-resolution device this is the actual number of pixels, but on a high-res device there would be multiple pixels for each "pixel" specified.  16px is default.
 * text-transform: capitalize, lowercase, uppercase, etc
 * text-align: left, right center

 Lecture 18: styling text part 2
 * relative font sizing with %'s and em's
 * font-size: 120%, would increase default by 20%
 * an "em" is a unit of measurement of an m in the particular font
 * NOTE: relative font sizing has a CUMULATIVE effect, they do not override, so if you specify font-size: 120% in the body and then font-size: 2em in some sub-element, that 2em is going to be double the 120% (cumulative behavior)
 * more common to use em's inside the doc and %'s in the top level body?

 Lecture 19: The box model, part 1
 * every element is a box, including content, padding, border, and margin
 * content on the innermost, padding around, border around that, margin at the outside... margin seems to show the style of the thing around it
 * specifying "width" is for the content only, does not include the padding or border... instead use "box-sizing: border-box" (default is "content-box") to change this behavior and have "width" be the width of the whole thing - all modern frameworks use border-box

 Lecture 19: The box model, part 2
 * box-sizing is a special CSS element that doesn't get inherited by children - use a star selector to apply everywhere: * { box-sizing: border-box; }
 * margins collapse, larger margin wins, for top/bottom margins
 * margins are cumulative for left and right margins

Lecture 19: The box model, part 3
* overflow property by default is "visible" meaning if you overflow the box content will print outside it.  "hidden" means it just disappears outside the box, and "auto" means scrollbars will appear to scroll it if it's too big for the box. "scroll" means a horizontal scrollbar too

Lecture 20: The background property
* specify "background" css as shortcut to override a bunch of specific background-* type things, e.g. { background: url('yaakov.png') no-repeat top center; }

Lecture 21: Positioning elements by floating
* margins never collapse on floated elements
* e.g. #p1 { background-color: #A52A2A; float: right}
* when yuo float elements it takes them out of the document flow
* the, e.g. "clear: left" style will resume the regular document flow - it basically says none of the elements it affects should allow anything to float to the left of them

Lecture 22: Relative and absolute element positioning, parts 1 & 2
* specify precise offsets to move elements around
* static positioning - normal document flow, default for all except html
* relative positioning - element is positioned relative to its normal position in the normal document flow
* "top, bottom, left, right" are the css offset properties 
* relative positioning doesn't impact things around the element - other elements "don't know" that it's moved
* e.g. "p { position: relative; top: 50px; left: 50px".  "top" really means "from top" (it's moving it down)
* absolute positioning is relative to nearest ancestor who has a position set on it other than "static" - e.g. by default that's the "html" ancestor
* with absolute positioning, element IS taken out of its normal flow

Lecture 23: Media queries parts 1 & 2
* make decisions between phone, tablet, and desktop
* @media (max-width: 767px) { p { color: blue; }}
* "max-width" is a Media Feature (reso.ves to true or fales)
* max/min width, orientation, screen, print, etc
* can use "and" or a comma which means "or", between Media Features

Lecture 24: Responsive design part 1 & 2
* mobile exceeds desktop browing and we want a single page to support both
* site adapts layout using proportion-based grids, flexible images, and css3 media queries
* verbosity/visual delivery may change
* alternatives include server-side tech to do the same thing (then you manage both separately which is a little awkward; also, "mobile" doesn't really fit all anyway and you'd need to do responsive there anyway)
* most popular layout is a 12 column grid (because of the factors of 12 - 1,2,3,4,6)
* grids can be nested within each other
* there's a meta tag called "name='viewport' content='width=device-width, initial-scale=1" which will force a phone not to auto-zoom its browser and to not break your responsive site :)

Lecture 25: Twitter bootstrap part 1 & 2
* most popular html, css, and js framework for developing responsive, mobile first projects on the web
* "mobile first" - start with mobile coding; PLAN mobile from the start
* CSS framework is mobile ready
* why use bootstrap?
    #1 complaint - too big, too bloated (solution, use selective download)
                   writing your own is obviously going to be a lot of work :)

Lecture 26: Bootstrap grid system part 1 & 2
* Grid system basics:
    * grid must be inside a div class="container" (fixed width) or "container-fluid" (full browser width)
    * div class="row" inside the container div - creates horizonal groups of columns and applies negative left/right margins (so margin offsets the padding and we are left-aligned w/the edge of the browser)
    * div class="col-md-4" (this is col-SIZE-SPAN) to device columns within the row
        * SIZE is something like "lg" or "md" - when you are below the min width of that size, columns will collapse (e.g. stack) unless another rule applies
        * SPAN - how many columns should the element span (values 1 - 12)
    * you don't have to use divs, you could use a "nav" or whatever makes sense

MODULE 3 (coding the restaurant site)

Lecture 27: visit with the client
* clients work well with examples of similar businesses
* less is more - make sure client understands that cleaner websites with directed calls to action are most effective - don't cram too much in
* find a way for the client to invest (e.g. pay for photography if you're doing the work for free to build your portfolio)
* google "web development client questionnaire"
* know what already exists

Lecture 28: Design overview
* don't start coding right away - use mock-ups to get quick feedback from clients
* balsamiq is great tool for mock-ups (balsamiq.com)
* use google fonts to keep things easy/free

Lecture 29: Ground rules and overview of setup
* always use browser-sync in the directory or under where you are coding:
    browser-sync start --server --directory --files "**/*"
* google fonts - go to https://fonts.google.com/, browse around, find something you like, click "Select this font" and then you can click on the "1 Family selected" bar that shows up and you'll see a link to embed it, along the lines of:
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">

Lecture 30: the navbar/header, part 1 and 2
* we seem to be using id's for one-off style things related to a particular item on the page, e.g. 'header-nav', or 'logo-img'
* meanwhile, we are using lots of bootstrap-specific classes to get our header nav set up
    * class="navbar navbar-default" at the top leve
    * a container div inside (not container-fluid as we don't want it to stretch the entire width of the browser)
    * "navbar-header" and "navbar-brand" classes appropriately - see http://getbootstrap.com/components/#navbar for reference
* use "pull-left" class to float something left in bootstrap
* text-shadow, line-height - interesting styles to look into
* text-decoration: none; (this will remove the underline under a link)
* class 'visible-md' - make visible only on medium devices

Lecture 31: button for future collapsible menu
* "navbar-toggle" class magically appears only when small (hamburger menu)
* "collapsed" plugin necessary to start the hamburger menu collapsed - data-toggle and data-target attributes to pull in/control some bootstrap js?

Lecture 32: nav menu buttons
* adding divs with id's that match the collapsible menu data-target; class is "collapse navbar-collapse"
* menu items are unordered lists - add classes nav, navbar-nav, navbar-right
* class "glyphicon" then the actual glyph, e.g. "class='glyphicon glyphicon-cutlery'" - http://getbootstrap.com/components/#glyphicons
* class="hidden-xs" means hide it when we are xs size
* <a href="tel:617-501-3348">foo</a> - clickable call link

Lecture 33 parts 1 & 2: more navbar styling, fixing some issues
* lots of issues w/floating things - needed to "clear" at some point
* add negative margin to fix up the header, need to make text smaller to fit
* create our own media queries to resize image (override #logo-img), etc on smaller screen
* font-size: 5vw  (vw is viewport width - 1vw is 1% of viewport width, e.g. this is responsive)

Lecture 34: coding the jumbotron
* div with id "main-container" and class "container"
* in that container, have a div with class "jumbotron"
* inside the jumbotron div, have img with class="img-responsive visible-xs" so it shows up only on xs devices and scales with their size.
* for larger sizes, we are using media queries setting .jumbotron element sizing
   - background: url('img.jpg');
     width: 100px;
     height: 100px;
     margin: 5px 5px 5px 0;
* do same w/diff scaled img.jpg for medium and small...

Lecture 35: navigation tiles
* added a div class="row" (interesting that we don't always use rows, thi sisn't like a table, e.g. no "row" for the jumbotron)
* using the standard way to have 2 cols for sm devices and 3 for md/lg (class="col-sm-4"...)
* http://placehold.it a useful website for sizing images
* use "background: url(...) no-repeat; background-position: center;" css instead of an img tag usually.  interesting.
* inserting an embedded map - from google maps there's actually a link you can get from the hamburger menu in google maps... use this in the href to link to it; iframe can go into the middle of the div to embed it.

Lecture 36: coding the footer, part 1 and 2
* class="panel-footer"
* div container inside it
* we override .panel-footer class in our css, which is ok because it just merges into the other stuff in bootstrap.css
* line-height - this is spacing between lines

Lecture 38: coding the single menu category page, parts 1, 2, and 3
* li class="active" makes it looks like something is selected
* you can use a class of "img-responsive" for an image to have it scale, but add a max-width style to not stretch the element more than it should be to avoid pixelation
* bootstrap has a nice float/clear fix - see "grid-responsive-reset" <div class="clearfix visible-xs-block"></div>

=== WEEK 4 - JAVASCRIPT ===

Lecture 40: where to place javascript code
  * in head OR body, use <script> element and put code inline there
  * in head OR body, use <script src=js/script.js></script>
  * "printf" debugging:  console.log(var)

Lecture 41: functions and vars
  * equivalent: function a { ... } AND var a = function () {...}
  * (a is the function now, not the var returned from the fn)
  * variables are dynamically typed
  * calling the fn:  a()
  * args:
      function compare (x,y) {
        return x > y;
      }
  * passing args:
      var a = compare(4, 5);
      compare(4, "a");
      compare();  <-- all args are always optional
  * we have 2 scopers - global and function (lexical)
     - there is no block scope
     - gobal is available everywhere
     - var available only in the function
  * Scope chain - everything executed in an "execution context"
     - each function invocation gets its own execution context
     - each execution context gets its own variable environment, a special "this" variable and a reference to its outer environment
     - so functions defined (NOT CALLED) within functions always have their external/outer vars available to them

Lecture 42: javascript types
  * a type is a particular data structure, js has 7 (6 primitive + 1 object)
  * object is a collection of name/value pairs:
  firstname: "Yaakov", lastname: "Chaikin", social: { linkedin: "foo", ... }
  * primitive types are single value, NOT an object - they are immutable/read-only
  * types:
     - boolean: "true" or "false"
     - Undefined: no value has ever been set (but it has been declared) - can only have one value: "undefined".  explicitly setting a variable to "undefined" is REALLY REALLY FROWNED ON
     - Null: signifies lack of value
     - Number: double-precision 64-bit floating point
     - String: sequence of characters used to represent text
     - Symbol: new in ES6 (released in 2015), not covered in this class

Lecture 43: common language constructs
  * string concatenation with +
  * += is a thing (var string = "Hello"; string += " World")
  * (ctrl-/ is an auto comment shortcut in sublime text - cool)
  * NaN is what you get when you do stuff like "undefined / 5"
  * equality is ==, strict equality === also verifies type (so "4" does not === 4, but "4" == 4)
  * shortcut for assignment of multiple vars:  var x = 4, y = 5;
  * things that are false:  false, null, undefined, "", 0, NaN
  * things that are true: true, "hello", 1, -1, "false"
  * you can find out if something is true or false by doing Boolean(thing) in the console
  * curly braces must be put after a thing, not on next line... e.g:
      return {
        name: "Yaakov"
      };
    and NOT:
      return
      {
        name: "Yaakov"
      };
    The second one will actually return undefined because javascript puts an implicit ; after the return!

Lecture 44: handling default values
  * setting a default in case something is undefined:
      sideDish = sideDish || "whatever!";

Lecture 45: Creating objects
  *  using 'new Object()' syntax - example:
    var company = new Object();
    company.name = "Facebook";
    company.ceo = new Object();
    company.ceo.firstName = "Mark";
    company.ceo.favColor = "blue";
    console.log(company);
    ...
  * you can do crazy things like name object properties with spaces using bracket notation instead of dot notation:
    company['ceo last name'] = "Zuckerberg";
  * using object literal syntax - example:
    var facebook = {
      name: "Facebook",
      ceo: {
        firstName: "Mark",
        favColor: "blue"
      },
      $stock: 110 // note that $ is a valid thing to call a variable in js - it has no special meaning
    };

Lecture 46: Functions explained
  * function multiply(x, y) {
      return x * y;
    };
  * functions are Objects... you can set properties on them:
  * console.log(multiply(5,3));
  * multiply.version = "v.1.0.0";
  * there is a special toString() function for each Object that will print it out
  * Function factories (functions returning functions):
    function makeMultiplier(multiply) {
      var myFunc = function (x) {
        return multiplier * x; 
      };
      return myFunc;
    }
  * var multiplyBy3 = makeMultiplier(3);
  * console.log(multiplyBy3(10));  <-- will return 30
  * You can pass functions as arguments
    function doOperationOn(x, operation) {
      return operation(x);
    }
  * var result = doOperationOn(5, multiplyBy3);  <-- this should return 15
  

Lecture 47: Passing variables by value vs by reference
  * primitives are passed by value, objects by reference
  * the actual value of an object variable is a memory address - when you say a = b (if a is an object), what is actually happening is that the memory address stored in a is now also the memory address stored in b - so a and b have separate memory locations but what is stored in that location is the value of the memory location of the object - so if you change the object via a or b, both will see the change.

Lecture 48: Function constructors, prototype, and the 'this' keyword
  * by convention, function constructurs are capitalized
  function Circle (radius) {
    this.radius = radius
    this.getArea = 
      function () {
        return Math.PI * Math.pow(this.radius,2);
      };
  }
  var myCircle = new Circle(10);
  * in this case the getArea function will be created for every instantiation of the Circle object - that's wasteful, use a prototype (and we'd remove the fn from the above Circle object):

  Circle.prototype.getArea =
    function () {
      return Math.PI * Math.pow(this.radius, 2);
    }
  * you can see the prototypes in the console if you console.log(someCircleObject) under the __proto__ property
  * remember to pass the "new" keyword to instantiate an object - you want "myCircle = new Circle(10)", NOT "myCircle = Circle(10)"

Lecture 49: Object Literals and the 'this' Keyword
  * var literalCircle = { // new Object() <-- defining object literals implies new object
      radius: 10,
      getArea: function () {
        console.log(this); <-- in this case 'this' refers to this specific object
        return Math.PI * Math.pow(this.radius, 2);
      }
    }
    console.log(literalCircle.getArea());

  * BUG: when you've got a function within a literal object function, 'this' refers to the global context!  Instead, make sure you define "var self = this" outside the embedded function:
  var literalCircle = {
    radius: 10,
    getArea: function () {
      var self = this;
      console.log(this);

      var increaseRadius = function() {
        self.radius = 20;
      };
      increaseRadius();
      console.log(this.radius);

      return Math.PI * Math.pow(this.radius, 2);
    }
  }
  console.log(literalCircle.getArea());  <-- returns 1256.63, but will instead return 314.159 if we don't have the "var self = this" line

Lecture 50: Arrays
  * var array = new Array();
    array[0] = "Yaakov";
    array[1] = 2;
    array[2] = function (name) {
      console.log("Hello " + name);
    };
    arary[3] = { course: " HTML, CSS & JS"};

    console.log(array);
    array[2]("matt");  <-- says "Hello matt"
    array[2](array[0]); <-- says "Hello Yaakov"

  * shorthand:
    var names = ["Yaakov", "John", "Joe"];
    for (var i = 0; i < names.length; i++) {
      console.log(names[i]);
    }
  * arrays can be sparse... above we could say names[100] = "Jim" and now names[3-99] are "undefined"
  * for loop over an object's properties:
    var myObj = {
      name: "Yaakov",
      course: "HTML/CSS/JS",
      platform: "Coursera"
    };
    for ( var prop in myObj) {
      console.log(prop + ": " + myObj[prop]);
    };
